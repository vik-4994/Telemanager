import { useEffect, useState } from "react";

export default function ChannelsList() {
  const [channels, setChannels] = useState([]);
  const [error, setError] = useState("");
  const token = localStorage.getItem("access");

  const fetchChannels = async () => {
    try {
      const res = await fetch("http://127.0.0.1:8000/api/channels/list/", {
        headers: {
          Authorization: `Bearer ${token}`,
        },
      });

      if (!res.ok) throw new Error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∫–∞–Ω–∞–ª–æ–≤");

      const data = await res.json();
      setChannels(data);
    } catch (err) {
      setError(err.message);
    }
  };

  const toggleActive = async (id) => {
    try {
      const res = await fetch(`http://127.0.0.1:8000/api/channels/${id}/toggle/`, {
        method: "POST",
        headers: {
          Authorization: `Bearer ${token}`,
        },
      });

      if (res.ok) {
        fetchChannels();
      } else {
        alert("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–º–µ–Ω–µ —Å—Ç–∞—Ç—É—Å–∞");
      }
    } catch (err) {
      console.error(err);
    }
  };

  const deleteChannel = async (id) => {
    if (!window.confirm("–£–¥–∞–ª–∏—Ç—å —ç—Ç–æ—Ç –∫–∞–Ω–∞–ª?")) return;

    try {
      const res = await fetch(`http://127.0.0.1:8000/api/channels/${id}/delete/`, {
        method: "DELETE",
        headers: {
          Authorization: `Bearer ${token}`,
        },
      });

      if (res.ok) {
        fetchChannels();
      } else {
        alert("–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏");
      }
    } catch (err) {
      console.error(err);
    }
  };

  useEffect(() => {
    fetchChannels();
  }, []);

  return (
    <div className="container mt-5">
      <h3 className="mb-4">üì° –°–ø–∏—Å–æ–∫ –≥—Ä—É–ø–ø / –∫–∞–Ω–∞–ª–æ–≤ –¥–ª—è –æ–±—É—á–µ–Ω–∏—è</h3>
      {error && <div className="alert alert-danger">{error}</div>}

      {channels.length === 0 ? (
        <p>–ù–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤.</p>
      ) : (
        <table className="table table-bordered">
          <thead className="table-light">
            <tr>
              <th>#</th>
              <th>Username</th>
              <th>–ù–∞–∑–≤–∞–Ω–∏–µ</th>
              <th>–¢–∏–ø</th>
              <th>–ê–∫—Ç–∏–≤–µ–Ω</th>
              <th>–î–µ–π—Å—Ç–≤–∏—è</th>
            </tr>
          </thead>
          <tbody>
            {channels.map((ch, i) => (
              <tr key={ch.id}>
                <td>{i + 1}</td>
                <td>{ch.username}</td>
                <td>{ch.title || "-"}</td>
                <td>{ch.type}</td>
                <td>
                  {ch.is_active ? (
                    <span className="text-success">–î–∞</span>
                  ) : (
                    <span className="text-danger">–ù–µ—Ç</span>
                  )}
                </td>
                <td>
                  <button
                    className="btn btn-sm btn-outline-secondary me-2"
                    onClick={() => toggleActive(ch.id)}
                  >
                    üîÅ {ch.is_active ? "–û—Ç–∫–ª—é—á–∏—Ç—å" : "–í–∫–ª—é—á–∏—Ç—å"}
                  </button>
                  <button
                    className="btn btn-sm btn-outline-danger"
                    onClick={() => deleteChannel(ch.id)}
                  >
                    üóëÔ∏è –£–¥–∞–ª–∏—Ç—å
                  </button>
                </td>
              </tr>
            ))}
          </tbody>
        </table>
      )}
    </div>
  );
}
