import { useEffect, useState } from "react";
import { useNavigate } from "react-router-dom";

export default function Dashboard() {
  const [user, setUser] = useState(null);
  const [accounts, setAccounts] = useState([]);
  const [loading, setLoading] = useState(true);
  const [proxies, setProxies] = useState([]);
  const [editingId, setEditingId] = useState(null);
  const navigate = useNavigate();

  const token = localStorage.getItem("access");

  const fetchProfile = async () => {
    const res = await fetch("http://127.0.0.1:8000/api/me/", {
      headers: { Authorization: `Bearer ${token}` },
    });
    if (res.status === 401) return navigate("/login");
    const data = await res.json();
    setUser(data);
  };

  const fetchAccounts = async () => {
    const res = await fetch("http://127.0.0.1:8000/api/accounts/", {
      headers: { Authorization: `Bearer ${token}` },
    });
    if (res.status === 401) return navigate("/login");
    const data = await res.json();
    setAccounts(data);
    setLoading(false);
  };

  const changeProxy = async (accountId, proxyId) => {
    const res = await fetch(
      `http://127.0.0.1:8000/api/accounts/${accountId}/set_proxy/`,
      {
        method: "PUT",
        headers: {
          "Content-Type": "application/json",
          Authorization: `Bearer ${token}`,
        },
        body: JSON.stringify({ proxy_id: proxyId }),
      }
    );

    if (res.ok) {
      setEditingId(null);
      fetchAccounts();
    } else {
      alert("–û—à–∏–±–∫–∞ —Å–º–µ–Ω—ã –ø—Ä–æ–∫—Å–∏");
    }
  };

  const fetchProxies = async () => {
    const res = await fetch("http://127.0.0.1:8000/api/accounts/proxies/", {
      headers: { Authorization: `Bearer ${token}` },
    });
    const data = await res.json();
    if (Array.isArray(data)) setProxies(data);
  };

  const deleteAccount = async (accountId) => {
    if (!window.confirm("–£–¥–∞–ª–∏—Ç—å —ç—Ç–æ—Ç –∞–∫–∫–∞—É–Ω—Ç?")) return;

    const res = await fetch(
      `http://127.0.0.1:8000/api/accounts/${accountId}/`,
      {
        method: "DELETE",
        headers: {
          Authorization: `Bearer ${token}`,
        },
      }
    );

    if (res.ok) {
      setAccounts(accounts.filter((acc) => acc.id !== accountId));
    } else {
      alert("–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∞–∫–∫–∞—É–Ω—Ç–∞");
    }
  };

  const checkAllAccounts = async () => {
    const confirmed = window.confirm("–ó–∞–ø—É—Å—Ç–∏—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É –≤—Å–µ—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤?");
    if (!confirmed) return;

    const res = await fetch("http://127.0.0.1:8000/api/accounts/check_all/", {
      method: "POST",
      headers: { Authorization: `Bearer ${token}` },
    });

    if (res.ok) {
      alert("–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–ø—É—â–µ–Ω–∞! –û–±–Ω–æ–≤–∏—Ç–µ —Å—Ç—Ä–∞–Ω–∏—Ü—É —á–µ—Ä–µ–∑ 10‚Äì30 —Å–µ–∫—É–Ω–¥.");
    } else {
      alert("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –ø—Ä–æ–≤–µ—Ä–∫–∏");
    }
  };

  useEffect(() => {
    if (!token) return navigate("/login");
    fetchProfile();
    fetchAccounts();
    fetchProxies();
  }, []);

  const logout = () => {
    localStorage.removeItem("access");
    localStorage.removeItem("refresh");
    navigate("/login");
  };

  return (
    <div className="d-flex vh-100">
      <div className="p-4 flex-grow-1">
        <h2>üë§ –ü—Ä–∏–≤–µ—Ç, {user?.username || "–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"}</h2>

        <hr />

        <div className="d-flex justify-content-between align-items-center mb-3">
          <h4>üì± Telegram –∞–∫–∫–∞—É–Ω—Ç—ã</h4>
          <button
            className="btn btn-outline-primary btn-sm"
            onClick={checkAllAccounts}
          >
            üîç –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –≤—Å–µ –∞–∫–∫–∞—É–Ω—Ç—ã
          </button>
        </div>

        {loading ? (
          <p>–ó–∞–≥—Ä—É–∑–∫–∞ –∞–∫–∫–∞—É–Ω—Ç–æ–≤...</p>
        ) : accounts.length === 0 ? (
          <p>–ù–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤.</p>
        ) : (
          <table className="table table-bordered">
            <thead className="table-light">
              <tr>
                <th>#</th>
                <th>–¢–µ–ª–µ—Ñ–æ–Ω</th>
                <th>–ì–µ–æ</th>
                <th>–°—Ç–∞—Ç—É—Å</th>
                <th>–û—Ç–ª–µ–∂–∫–∞</th>
                <th>–†–æ–ª—å</th>
                <th>–ò–º—è</th>
                <th>–ü–æ—Å–ª–µ–¥–Ω–∏–π –≤—Ö–æ–¥</th>
                <th>–ü—Ä–æ–∫—Å–∏</th>
                <th>–î–µ–π—Å—Ç–≤–∏—è</th>
              </tr>
            </thead>
            <tbody>
              {accounts.map((acc, index) => (
                <tr key={acc.id}>
                  <td>{index + 1}</td>
                  <td>{acc.phone}</td>
                  <td>{acc.geo}</td>
                  <td>{acc.status}</td>
                  <td>{acc.days_idle}</td>
                  <td>{acc.role || "-"}</td>
                  <td>{acc.name}</td>
                  <td>{new Date(acc.last_used).toLocaleString()}</td>
                  <td>
                    {(() => {
                      const proxy = proxies.find((p) => p.id === acc.proxy_id);
                      return proxy
                        ? `${proxy.proxy_type.toUpperCase()} ${proxy.host}:${
                            proxy.port
                          }`
                        : "–ë–µ–∑ –ø—Ä–æ–∫—Å–∏";
                    })()}
                  </td>
                  <td>
                    <button
                      className="btn btn-outline-secondary btn-sm"
                      style={{ padding: "2px 6px" }}
                      title="–°–º–µ–Ω–∏—Ç—å –ø—Ä–æ–∫—Å–∏"
                      onClick={() => setEditingId(acc.id)}
                    >
                      ‚öôÔ∏è
                    </button>
                    {editingId === acc.id && (
                      <select
                        className="form-select mt-2"
                        onChange={(e) => {
                          const value = e.target.value;
                          changeProxy(acc.id, value === "null" ? null : value);
                        }}
                        defaultValue=""
                      >
                        <option disabled value="">
                          –í—ã–±–µ—Ä–∏ –ø—Ä–æ–∫—Å–∏
                        </option>
                        <option value="null">üö´ –ë–µ–∑ –ø—Ä–æ–∫—Å–∏</option>
                        {proxies
                          .filter((p) => p.id !== acc.proxy)
                          .map((p) => (
                            <option key={p.id} value={p.id}>
                              {p.proxy_type.toUpperCase()} {p.host}:{p.port}
                            </option>
                          ))}
                      </select>
                    )}
                    <button
                      className="btn btn-outline-danger btn-sm"
                      style={{ padding: "2px 6px" }}
                      title="–£–¥–∞–ª–∏—Ç—å –∞–∫–∫–∞—É–Ω—Ç"
                      onClick={() => deleteAccount(acc.id)}
                    >
                      üóëÔ∏è
                    </button>
                  </td>
                </tr>
              ))}
            </tbody>
          </table>
        )}
      </div>
    </div>
  );
}
